/************************************************************************
File pdh_hmt_weakform.history - history of weakform implementation

Contains definitions of inline routines:
  pdr_comp_weakform_(...) - all routines that implement weakform lhs & rhs

------------------------------
History:
	2011    - Przemyslaw Plaszewski (pplaszew@agh.edu.pl)
        2012    - Krzysztof Banas (pobanas@cyf-kr.edu.pl)
*************************************************************************/

#ifndef PDH_HMT_WEAKFORM_H
#define PDH_HMT_WEAKFORM_H

#ifdef __cplusplus
extern "C" {
#endif

/*-----------------------------------------------------------------*/

/*-----------------------------------------------------------------*/
/*----------------------- N-S WEAK FORM ---------------------------*/
/*---------------------------  LHS --------------------------------*/
/*-----------------------------------------------------------------*/
/*--------------------kept here for reference----------------------*/



//
//          //(u_dt, v) - Mval matrix of coefficients
//          refDensity * (u_x*v_x + u_y*v_y + u_z*v_z)/delta_t
//          Mval[0,0] = refDensity/delta_t // u_x*v_x
//          Mval[1,1] = refDensity/delta_t // u_y*v_y
//          Mval[2,2] = refDensity/delta_t // u_z*v_z
//          Mval[3,3] = 0 - no time derivative of pressure
//

//
//          //+((grad*u)u, v) - Bx, By, Bz matrices of coefficients
//          + refDensity * (
//              v_x*(uk_x*u_xdx + uk_y*u_xdy + uk_z*u_xdz) + 
//              v_y*(uk_x*u_ydx + uk_y*u_ydy + uk_z*u_ydz) +
//              v_z*(uk_x*u_zdx + uk_y*u_zdy + uk_z*u_zdz)
//          )
//          Bx[0,0] = refDensity * uk_x // v_x*u_xdx
//          Bx[1,1] = refDensity * uk_x // v_y*u_ydx
//          Bx[2,2] = refDensity * uk_x // v_z*u_zdx
//
//          By[0,0] = refDensity * uk_y // v_x*u_xdy
//          By[1,1] = refDensity * uk_y // v_y*u_ydy
//          By[2,2] = refDensity * uk_y // v_z*u_zdy
//
//          Bz[0,0] = refDensity * uk_z // v_x*u_xdy
//          Bz[1,1] = refDensity * uk_z // v_y*u_ydy
//          Bz[2,2] = refDensity * uk_z // v_z*u_zdy
//

//
//          //+(2*dyn_visc*e(u), e(v)) - A.. matrices of coefficients
//          // the same results assuming visc*(u_i,j * u_j,i)*w_i,j
//          // !!! dyn_visc is DYNAMIC visocosity (not kinematic = dyn_visc/rho)
//          // dyn_visc[kg/m/s], [g/cm/s]
//          +                          
//          2.0*dyn_visc*(
//          u_xdx*v_xdx + u_ydy*v_ydy + u_zdz*v_zdz +
//          0.5*(u_ydx+u_xdy)*0.5*(v_ydx+v_xdy) +
//          0.5*(u_zdx+u_xdz)*0.5*(v_zdx+v_xdz) +
//          0.5*(u_zdy+u_ydz)*0.5*(v_zdy+v_ydz)
//          )
// convention: axy[jeq*nreq+ieq] (axy[ieq,jeq]) * dv[ieq]/dx * du[jeq]/dy
//          Axx[0,0] = 2.0*dyn_visc // u_xdx*v_xdx 
//          Axx[1,1] = dyn_visc // u_ydx*v_ydx 
//          Axx[2,2] = dyn_visc // u_zdx*v_zdx 
//
//          Ayy[0,0] = dyn_visc // u_xdy*v_xdy 
//          Ayy[1,1] = 2.0*dyn_visc // u_ydy*v_ydy 
//          Ayy[2,2] = dyn_visc // u_zdy*v_zdy 
//
//          Azz[0,0] = dyn_visc // u_xdz*v_xdz 
//          Azz[1,1] = dyn_visc // u_ydz*v_ydz 
//          Azz[2,2] = 2.0*dyn_visc // u_zdz*v_zdz 
//
//          Ayx[0,1] = dyn_visc // u_ydx*v_xdy 
//          Axy[1,0] = dyn_visc // u_xdy*v_ydx 
//          Azx[0,2] = dyn_visc // u_zdx*v_xdz 
//          Axz[2,0] = dyn_visc // u_xdz*v_zdx 
//          Azy[1,2] = dyn_visc // u_zdy*v_ydz 
//          Ayz[2,1] = dyn_visc // u_ydz*v_zdy 

// assuming that velocity field is divergence free we can obtain simpler form
// (but we do not enforce additionally divergence free condition)
//          Axx[0,0] = dyn_visc // u_xdx*v_xdx 
//          Axx[1,1] = dyn_visc // u_ydx*v_ydx 
//          Axx[2,2] = dyn_visc // u_zdx*v_zdx 
//
//          Ayy[0,0] = dyn_visc // u_xdy*v_xdy 
//          Ayy[1,1] = dyn_visc // u_ydy*v_ydy 
//          Ayy[2,2] = dyn_visc // u_zdy*v_zdy 
//
//          Azz[0,0] = dyn_visc // u_xdz*v_xdz 
//          Azz[1,1] = dyn_visc // u_ydz*v_ydz 
//          Azz[2,2] = dyn_visc // u_zdz*v_zdz 
//

//
//          //-(grad*v, p)  - Tx, Ty, Tz matrices of coefficients
//          -
//          p*(v_xdx + v_ydy + v_zdz)
//
//          Tx[0,3]  = -1.0; // p*v_xdx
//          Ty[1,3]  = -1.0; // p*v_ydy
//          Tz[2,3]  = -1.0; // p*v_zdz
//

//
//          // ?-(grad*u, q) - Bx, By, Bz matrices of coefficients
//          ?- 
//          q*(u_xdx + u_ydy + u_zdz)
//
//          Bx[3,0] = 1.0  // q*u_xdx
//          By[3,1] = 1.0  // q*u_ydy
//          Bz[3,2] = 1.0  // q*u_zdz
//
// if (grad*u, q) term is integrated by parts we are left with the terms
//          - (dq/dx*u_x + dq/dy*u_y + dq/dz*u_z) 
//                                  - Tx, Ty, Tz matrices of coefficients
//
//          Tx[3,0]  = -1.0; // dq/dx*u_x
//          Ty[3,1]  = -1.0; // dq/dy*u_y
//          Tz[3,2]  = -1.0; // dq/dz*u_z
//

//
//          //stabilization part: +(u_dt, res) - Tx, Ty, Tz matrices
//          +
//          refDensity * (tau/delta_t)*( 
//          u_x* /*res*/(uk_x*v_xdx + uk_y*v_xdy + uk_z*v_xdz -? q_dx) +
//          u_y* /*res*/(uk_x*v_ydx + uk_y*v_ydy + uk_z*v_ydz -? q_dy) + 
//          u_z* /*res*/(uk_x*v_zdx + uk_y*v_zdy + uk_z*v_zdz -? q_dz)
//          )
//          Tx[0,0] = refDensity * (tau/delta_t) * uk_x // u_x*v_xdx
//          Tx[1,1] = refDensity * (tau/delta_t) * uk_x // u_y*v_ydx
//          Tx[2,2] = refDensity * (tau/delta_t) * uk_x // u_z*v_zdx
//          Tx[3,0] =  (tau/delta_t) // u_x*q_dx
//
//          Ty[0,0] = refDensity * (tau/delta_t) * uk_y // u_x*v_xdy
//          Ty[1,1] = refDensity * (tau/delta_t) * uk_y // u_y*v_ydy
//          Ty[2,2] = refDensity * (tau/delta_t) * uk_y // u_z*v_zdy
//          Ty[3,1] =  (tau/delta_t) // u_y*q_dy
//
//          Tz[0,0] = refDensity * (tau/delta_t) * uk_z // u_x*v_xdz
//          Tz[1,1] = refDensity * (tau/delta_t) * uk_z // u_y*v_ydz
//          Tz[2,2] = refDensity * (tau/delta_t) * uk_z // u_z*v_zdz
//          Tz[3,2] =  (tau/delta_t) // u_z*q_dz
//

//
//          //stabilization part: +((grad*u)u, res) - A.. matrices
//          +
//          refDensity * tau*(
//          (uk_x*u_xdx + uk_y*u_xdy + uk_z*u_xdz)* 
//                     /*res*/(uk_x*v_xdx + uk_y*v_xdy + uk_z*v_xdz -? q_dx) + 
//          (uk_x*u_ydx + uk_y*u_ydy + uk_z*u_ydz)* 
//                     /*res*/(uk_x*v_ydx + uk_y*v_ydy + uk_z*v_ydz -? q_dy) +
//          (uk_x*u_zdx + uk_y*u_zdy + uk_z*u_zdz)* 
//                     /*res*/(uk_x*v_zdx + uk_y*v_zdy + uk_z*v_zdz -? q_dz)
//          )
//          Axx[0,0] = refDensity * tau * uk_x * uk_x // u_xdx*v_xdx
//          Axx[1,1] = refDensity * tau * uk_x * uk_x // u_ydx*v_ydx
//          Axx[2,2] = refDensity * tau * uk_x * uk_x // u_zdx*v_zdx
//          Axx[3,0] = tau * uk_x // u_xdx*q_dx
//          Ayx[0,0] = refDensity * tau * uk_x * uk_y // u_xdx*v_xdy
//          Ayx[1,1] = refDensity * tau * uk_x * uk_y // u_ydx*v_ydy
//          Ayx[2,2] = refDensity * tau * uk_x * uk_y // u_zdx*v_zdy
//          Ayx[3,1] = tau * uk_x // u_ydx*q_dy
//          Azx[0,0] = refDensity * tau * uk_x * uk_z // u_xdx*v_xdz
//          Azx[1,1] = refDensity * tau * uk_x * uk_z // u_ydx*v_ydz
//          Azx[2,2] = refDensity * tau * uk_x * uk_z // u_zdx*v_zdz
//          Azx[3,2] = tau * uk_x // u_zdx*q_dz
//
//          Axy[0,0] = refDensity * tau * uk_y * uk_x // u_xdy*v_xdx
//          Axy[1,1] = refDensity * tau * uk_y * uk_x // u_ydy*v_ydx
//          Axy[2,2] = refDensity * tau * uk_y * uk_x // u_zdy*v_zdx
//          Axy[3,0] = tau * uk_y // u_xdy*q_dx
//          Ayy[0,0] = refDensity * tau * uk_y * uk_y // u_xdy*v_xdy
//          Ayy[1,1] = refDensity * tau * uk_y * uk_y // u_ydy*v_ydy
//          Ayy[2,2] = refDensity * tau * uk_y * uk_y // u_zdy*v_zdy
//          Ayy[3,1] = tau * uk_y // u_ydy*q_dy
//          Azy[0,0] = refDensity * tau * uk_y * uk_z // u_xdy*v_xdz
//          Azy[1,1] = refDensity * tau * uk_y * uk_z // u_ydy*v_ydz
//          Azy[2,2] = refDensity * tau * uk_y * uk_z // u_zdy*v_zdz
//          Azy[3,2] = tau * uk_y // u_zdy*q_dz
//
//          Axz[0,0] = refDensity * tau * uk_z * uk_x // u_xdz*v_xdx
//          Axz[1,1] = refDensity * tau * uk_z * uk_x // u_ydz*v_ydx
//          Axz[2,2] = refDensity * tau * uk_z * uk_x // u_zdz*v_zdx
//          Axz[3,0] = tau * uk_z // u_xdz*q_dx
//          Ayz[0,0] = refDensity * tau * uk_z * uk_y // u_xdz*v_xdy
//          Ayz[1,1] = refDensity * tau * uk_z * uk_y // u_ydz*v_ydy
//          Ayz[2,2] = refDensity * tau * uk_z * uk_y // u_zdz*v_zdy
//          Ayz[3,1] = tau * uk_z // u_ydz*q_dy
//          Azz[0,0] = refDensity * tau * uk_z * uk_z // u_xdz*v_xdz
//          Azz[1,1] = refDensity * tau * uk_z * uk_z // u_ydz*v_ydz
//          Azz[2,2] = refDensity * tau * uk_z * uk_z // u_zdz*v_zdz
//          Azz[3,2] = tau * uk_z // u_zdz*q_dz
//

//
//          //stabilization part: +(grad*p, res) - A.. matrices
//          +
//          tau*(
//          p_dx* /*res*/(uk_x*v_xdx + uk_y*v_xdy + uk_z*v_xdz -? q_dx) +
//          p_dy* /*res*/(uk_x*v_ydx + uk_y*v_ydy + uk_z*v_ydz -? q_dy) + 
//          p_dz* /*res*/(uk_x*v_zdx + uk_y*v_zdy + uk_z*v_zdz -? q_dz)
//          )
//          Axx[0,3] = tau * uk_x // p_dx*v_xdx
//          Axy[1,3] = tau * uk_x // p_dy*v_ydx
//          Axz[2,3] = tau * uk_x // p_dz*v_zdx
//
//          Ayx[0,3] = tau * uk_y // p_dx*v_xdy
//          Ayy[1,3] = tau * uk_y // p_dy*v_ydy
//          Ayz[2,3] = tau * uk_y // p_dz*v_zdy
//
//          Azx[0,3] = tau * uk_z // p_dx*v_xdz
//          Azy[1,3] = tau * uk_z // p_dy*v_ydz
//          Azz[2,3] = tau * uk_z // p_dz*v_zdz
//
//          Axx[3,3] = tau/refDensity // p_dx*q_dx
//          Ayy[3,3] = tau/refDensity // p_dy*q_dy
//          Azz[3,3] = tau/refDensity // p_dz*q_dz
//

//
//          //+(grad*u, sigma*grad*v) - A.. matrices
//          +
//          sigma*(u_xdx + u_ydy + u_zdz)*(v_xdx + v_ydy + v_zdz)
//
//          Axx[0,0] = sigma // u_xdx*v_xdx
//          Axy[0,1] = sigma // u_ydy*v_xdx
//          Axz[0,2] = sigma // u_zdz*v_xdx
//
//          Ayx[1,0] = sigma // u_xdx*v_ydy
//          Ayy[1,1] = sigma // u_ydy*v_ydy
//          Ayz[1,2] = sigma // u_zdz*v_ydy
//
//          Azx[2,0] = sigma // u_xdx*v_zdz
//          Azy[2,1] = sigma // u_ydy*v_zdz
//          Azz[2,2] = sigma // u_zdz*v_zdz
//

/*-----------------------------------------------------------------*/
/*----------------------- N-S WEAK FORM ---------------------------*/
/*---------------------------  RHS --------------------------------*/
/*-----------------------------------------------------------------*/
/*--------------------kept here for reference----------------------*/



//       
//       refDensity * (un_x * v_x + un_y * v_y + un_z * v_z) / delta_t
//
//       Lval[0] = refDensity * un_x  / delta_t // v_x
//       Lval[1] = refDensity * un_y  / delta_t // v_y
//       Lval[2] = refDensity * un_z  / delta_t // v_z
//

//        f_x * v_x + f_y * v_y + f_z * v_z  - 
//
//       Sval[0] = f_x // v_x      
//       Sval[1] = f_y // v_y      
//       Sval[2] = f_z // v_z      


//        + 
//        tau * (
//          f_x * (uk_x * v_xdx + uk_y * v_xdy + uk_z * v_xdz - q_dx) +
//          f_y * (uk_x * v_ydx + uk_y * v_ydy + uk_z * v_ydz - q_dy) +
//          f_z * (uk_x * v_zdx + uk_y * v_zdy + uk_z * v_zdz - q_dz)
//        )
//        Qx[0] = f_x * uk_x // v_xdx
//        Qx[1] = f_y * uk_x // v_ydx
//        Qx[2] = f_z * uk_x // v_zdx
//
//        Qy[0] = f_x * uk_y // v_xdy
//        Qy[1] = f_y * uk_y // v_ydy
//        Qy[2] = f_z * uk_y // v_zdy
//
//        Qz[0] = f_x * uk_z // v_xdz
//        Qz[1] = f_y * uk_z // v_ydz
//        Qz[2] = f_z * uk_z // v_zdz
//

//        +
//        refDensity * (tau / delta_t) * (
//          un_x * /*res*/(uk_x * v_xdx + uk_y * v_xdy + uk_z * v_xdz -? q_dx) +
//          un_y * /*res*/(uk_x * v_ydx + uk_y * v_ydy + uk_z * v_ydz -? q_dy) +
//          un_z * /*res*/(uk_x * v_zdx + uk_y * v_zdy + uk_z * v_zdz -? q_dz)
//        )
//        Qx[0] = refDensity * (tau / delta_t) * un_x * uk_x // v_xdx
//        Qx[1] = refDensity * (tau / delta_t) * un_y * uk_x // v_ydx
//        Qx[2] = refDensity * (tau / delta_t) * un_z * uk_x // v_zdx
//
//        Qy[0] = refDensity * (tau / delta_t) * un_x * uk_y // v_xdy
//        Qy[1] = refDensity * (tau / delta_t) * un_y * uk_y // v_ydy
//        Qy[2] = refDensity * (tau / delta_t) * un_z * uk_y // v_zdy
//
//        Qz[0] = refDensity * (tau / delta_t) * un_x * uk_z // v_xdz
//        Qz[1] = refDensity * (tau / delta_t) * un_y * uk_z // v_ydz
//        Qz[2] = refDensity * (tau / delta_t) * un_z * uk_z // v_zdz
//
//        Qx[3] = (tau / delta_t) * un_x // q_dx
//        Qy[3] = (tau / delta_t) * un_y // q_dy
//        Qz[3] = (tau / delta_t) * un_z // q_dz


/*-----------------------------------------------------------------*/

//RHS Von Neumann
//    h_x * v_x + h_y * v_y + h_z * v_z;
//
// if (grad*u,q) term is integrated by parts we have on the whole boundary terms
//    q * ( u_x*n_x + u_y*n_y + u_z*n_z )
//    

/**************************************/
/* INTERNAL PROCEDURES                */
/**************************************/
/* Rules:
/* - name always begins with pdr_ */
/* - argument names start uppercase; EXCEPTION HERE: 
below functions are small computational ones without variable definitions
No need to distinguish arguments */

//*******************  u_x
/*
All stabilized NS terms involving: u_x
    (u_x*v_x)/delta_t
    +v_x*(uk_x*u_xdx + uk_y*u_xdy + uk_z*u_xdz)
    +2.0*dyn_visc*(u_xdx*v_xdx + 0.5*(u_xdy)*(v_ydx+v_xdy) + 0.5*(u_xdz)*(v_zdx+v_xdz))
    -q*(u_xdx)
    +(tau/delta_t)*(u_x*(uk_x*v_xdx + uk_y*v_xdy + uk_z*v_xdz - q_dx))
    +tau*((uk_x*u_xdx + uk_y*u_xdy + uk_z*u_xdz)*(uk_x*v_xdx + uk_y*v_xdy + uk_z*v_xdz - q_dx))
    +sigma*(u_xdx)*(v_xdx + v_ydy + v_zdz);
  */

  static inline double pdr_comp_weakform_lhs_uxvx(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_x v_x */
    return (
	     //Matrix (1): (u_dt, v) //note: terms involving u_n moved to RHS //Mass matrix
	     ref_density * (shp * tst) / delta_t
	     //Matrix (2): +((grad*u)u, v)  
	     + ref_density * tst * (uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz)
	     //Matrix (3): +(2visc*e(u), e(v))    
	     + 2.0 * dyn_visc * (shp_dx * tst_dx + 0.5 * (shp_dy) * (tst_dy) + 0.5 * (shp_dz) * (tst_dz)
	     )
	     //Matrix (6): stabilization part: +(u_dt, res) //note: terms involving u_n moved to RHS
	     + ref_density * (tau_fluid / delta_t) * (shp * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	     //Matrix (7): stabilization part: +((grad*u)u, res)
	     + ref_density * tau_fluid * ((uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)    
	     + sigma * (shp_dx) * (tst_dx)
	);

  } static inline double pdr_comp_weakform_lhs_uxvy(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_x v_y */
    return (
	     //Matrix (3): +(2visc*e(u), e(v))
	     2.0 * dyn_visc * (0.5 * (shp_dy) * (tst_dx)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)  
	     + sigma * (shp_dx) * (tst_dy)
	);
  }
  static inline double pdr_comp_weakform_lhs_uxvz(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_x v_z */
    return (
	     //Matrix (3): +(2visc*e(u), e(v))
	     2.0 * dyn_visc * (0.5 * (shp_dz) * (tst_dx)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)
	     + sigma * (shp_dx) * (tst_dz)
	);
  }
  static inline double pdr_comp_weakform_lhs_uxq(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_x q  */
    return (
	     //Matrix (5): -(grad*u, q)
	     -tst * (shp_dx)
	     //Matrix (6): stabilization part: +(u_dt, res) //note: terms involving u_n moved to RHS      
	     + ref_density * (tau_fluid / delta_t) * (shp * /*res */ (-tst_dx)
	     )
	     //Matrix (7): stabilization part: +((grad*u)u, res)
	     + ref_density * tau_fluid * ((uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ (-tst_dx)
	     )
	);
  }


//*******************  u_y
/*
All stabilized NS terms involving: u_y
    (u_y*v_y)/delta_t
    +v_y*(uk_x*u_ydx + uk_y*u_ydy + uk_z*u_ydz)
    +2.0*dyn_visc*(u_ydy*v_ydy + 0.5*(u_ydx)*(v_ydx+v_xdy) + 0.5*(u_ydz)*(v_zdy+v_ydz))
    -q*(u_ydy)
    +(tau/delta_t)*(u_y*(uk_x*v_ydx + uk_y*v_ydy + uk_z*v_ydz - q_dy))
    +tau*((uk_x*u_ydx + uk_y*u_ydy + uk_z*u_ydz)*(uk_x*v_ydx + uk_y*v_ydy + uk_z*v_ydz - q_dy))
    +sigma*(u_ydy)*(v_xdx + v_ydy + v_zdz);
  */



  static inline double pdr_comp_weakform_lhs_uyvx(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_y v_x */
    return (
	     //Matrix (3): +(2visc*e(u), e(v))
	     2.0 * dyn_visc * (0.5 * (shp_dx) * (tst_dy)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)
	     + sigma * (shp_dy) * (tst_dx)
	);
  }
  static inline double pdr_comp_weakform_lhs_uyvy(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_y v_y */
    return (
	     //Matrix (1): (u_dt, v) //note: terms involving u_n moved to RHS //Mass matrix
	     ref_density * (shp * tst) / delta_t
	     //Matrix (2): +((grad*u)u, v)
	     + ref_density * tst * (uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz)
	     //Matrix (3): +(2visc*e(u), e(v))
	     + 2.0 * dyn_visc * (shp_dy * tst_dy + 0.5 * (shp_dx) * (tst_dx) + 0.5 * (shp_dz) * (tst_dz)
	     )
	     //Matrix (6): stabilization part: +(u_dt, res) //note: terms involving u_n moved to RHS
	     + ref_density * (tau_fluid / delta_t) * (shp * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	     //Matrix (7): stabilization part: +((grad*u)u, res)
	     + ref_density * tau_fluid * ((uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)
	     + sigma * (shp_dy) * (tst_dy)
	);
  }
  static inline double pdr_comp_weakform_lhs_uyvz(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_y v_z */
    return (
	     //Matrix (3): +(2visc*e(u), e(v))
	     2.0 * dyn_visc * (0.5 * (shp_dz) * (tst_dy)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)
	     + sigma * (shp_dy) * (tst_dz));
  }
  static inline double pdr_comp_weakform_lhs_uyq(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_y q  */
    return (
	     //Matrix (5): -(grad*u, q)
	     -tst * (shp_dy)
	     //Matrix (6): stabilization part: +(u_dt, res) //note: terms involving u_n moved to RHS
	     + ref_density * (tau_fluid / delta_t) * (shp * /*res */ (-tst_dy)
	     )
	     //Matrix (7): stabilization part: +((grad*u)u, res)
	     + ref_density * tau_fluid * ((uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ (-tst_dy)
	     )
	);
  }



//********************  u_z
/*
All stabilized NS terms involving: u_z
    (u_z*v_z)/delta_t
    +v_z*(uk_x*u_zdx + uk_y*u_zdy + uk_z*u_zdz)
    +2.0*dyn_visc*(u_zdz*v_zdz + 0.5*(u_zdx)*(v_zdx+v_xdz) + 0.5*(u_zdy)*(v_zdy+v_ydz))
    -q*(u_zdz)
    +(tau/delta_t)*(u_z*(uk_x*v_zdx + uk_y*v_zdy + uk_z*v_zdz - q_dz))
    +tau*((uk_x*u_zdx + uk_y*u_zdy + uk_z*u_zdz)*(uk_x*v_zdx + uk_y*v_zdy + uk_z*v_zdz - q_dz))
    +sigma*(u_zdz)*(v_xdx + v_ydy + v_zdz);
  */



  static inline double pdr_comp_weakform_lhs_uzvx(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_z v_x */
    return (
	     //Matrix (3): +(2visc*e(u), e(v))
	     2.0 * dyn_visc * (0.5 * (shp_dx) * (tst_dz)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)
	     + sigma * (shp_dz) * (tst_dx)
	);
  }
  static inline double pdr_comp_weakform_lhs_uzvy(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_z v_y */
    return (
	     //Matrix (3): +(2visc*e(u), e(v))
	     2.0 * dyn_visc * (0.5 * (shp_dy) * (tst_dz)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)  
	     + sigma * (shp_dz) * (tst_dy)
	);
  }
  static inline double pdr_comp_weakform_lhs_uzvz(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_z v_z */
    return (
	     //Matrix (1): (u_dt, v) //note: terms involving u_n moved to RHS //Mass matrix
	     ref_density * (shp * tst) / delta_t
	     //Matrix (2): +((grad*u)u, v)
	     + ref_density * tst * (uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz)
	     //Matrix (3): +(2visc*e(u), e(v))
	     + 2.0 * dyn_visc * (shp_dz * tst_dz + 0.5 * (shp_dx) * (tst_dx) + 0.5 * (shp_dy) * (tst_dy)
	     )
	     //Matrix (6): stabilization part: +(u_dt, res) //note: terms involving u_n moved to RHS
	     + ref_density * (tau_fluid / delta_t) * (shp * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	     //Matrix (7): stabilization part: +((grad*u)u, res)
	     + ref_density * tau_fluid * ((uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	     //Matrix (8): +(grad*u, sigma*grad*v)
	     + sigma * (shp_dz) * (tst_dz)
	);
  }
  static inline double pdr_comp_weakform_lhs_uzq(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*u_z q  */
    return (
	     //Matrix (5): -(grad*u, q)
	     -tst * (shp_dz)
	     //Matrix (6): stabilization part: +(u_dt, res) //note: terms involving u_n moved to RHS
	     + ref_density * (tau_fluid / delta_t) * (shp * /*res */ (-tst_dz)
	     )
	     //Matrix (7): stabilization part: +((grad*u)u, res)  
	     + ref_density * tau_fluid * ((uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ (-tst_dz)
	     )
	);
  }


//***********************  p
/*
All stabilized NS terms involving: p
    -p*(v_xdx + v_ydy + v_zdz)
    +tau*(
    p_dx*(uk_x*v_xdx + uk_y*v_xdy + uk_z*v_xdz - q_dx) +
    p_dy*(uk_x*v_ydx + uk_y*v_ydy + uk_z*v_ydz - q_dy) +
    p_dz*(uk_x*v_zdx + uk_y*v_zdy + uk_z*v_zdz - q_dz)
    )
  */


  static inline double pdr_comp_weakform_lhs_pvx(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*p v_x */
    return (
	     //Matrix (4): -(grad*v, p)
	     -shp * (tst_dx)
	     //Matrix (9): stabilization part: +(grad*p, res)
	     + tau_fluid * (shp_dx * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	);
  }
  static inline double pdr_comp_weakform_lhs_pvy(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*p v_y */
    return (
	     //Matrix (4): -(grad*v, p)
	     -shp * (tst_dy)
	     //Matrix (9): stabilization part: +(grad*p, res)
	     + tau_fluid * (shp_dy * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	);
  }
  static inline double pdr_comp_weakform_lhs_pvz(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*p v_z */
    return (
	     //Matrix (4): -(grad*v, p)
	     -shp * (tst_dz)
	     //Matrix (9): stabilization part: +(grad*p, res)
	     + tau_fluid * (shp_dz * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	     )
	);
  }
  static inline double pdr_comp_weakform_lhs_pq(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*p q  */
    return (
	     //Matrix (9): stabilization part: +(grad*p, res)
	     tau_fluid * (shp_dx * (-tst_dx) + shp_dy * (-tst_dy) + shp_dz * (-tst_dz)
	     )
	);
  }


  static inline double pdr_comp_weakform_lhs_tw(double ref_density, double delta_t, double dyn_visc, double specific_heat, double tconductivity, double tau_fluid, double tau_therm, double sigma, double shp, double shp_dx, double shp_dy, double shp_dz, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z) {
    /*T w  */
    return ((shp / delta_t) * tst + (uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * tst +
	    /* k/(ro*c) */ (tconductivity / (ref_density * specific_heat)) * (shp_dx * tst_dx + shp_dy * tst_dy + shp_dz * tst_dz)
	    + (uk_x * shp_dx + uk_y * shp_dy + uk_z * shp_dz) * /*res */ tau_therm * (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    + (shp / delta_t) * /*res */ tau_therm * (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	);
  }



/*-----------------------------------------------------------------*/




  static inline double pdr_comp_weakform_rhs_vx(double f_x, double f_y, double f_z, double ref_density, double delta_t, double tau_fluid, double tau_therm, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z, double un_x, double un_y, double un_z, double tk) {
    //v_x
    return (f_x * tst + tau_fluid * (f_x * (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    )
	    //MOVED FROM LHS:
	    + ref_density * (un_x * tst) / delta_t + ref_density * (tau_fluid / delta_t) * (un_x * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    )
	);
  }
  static inline double pdr_comp_weakform_rhs_vy(double f_x, double f_y, double f_z, double ref_density, double delta_t, double tau_fluid, double tau_therm, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z, double un_x, double un_y, double un_z, double tk) {
    //v_y
    return (f_y * tst + tau_fluid * (f_y * (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    )
	    //MOVED FROM LHS:
	    + ref_density * (un_y * tst) / delta_t + ref_density * (tau_fluid / delta_t) * (un_y * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    )
	);
  }
  static inline double pdr_comp_weakform_rhs_vz(double f_x, double f_y, double f_z, double ref_density, double delta_t, double tau_fluid, double tau_therm, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z, double un_x, double un_y, double un_z, double tk) {
    //v_z
    return (f_z * tst + tau_fluid * (f_z * (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    )
	    //MOVED FROM LHS:
	    + ref_density * (un_z * tst) / delta_t + ref_density * (tau_fluid / delta_t) * (un_z * /*res */ (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	    )
	);
  }
  static inline double pdr_comp_weakform_rhs_q(double f_x, double f_y, double f_z, double ref_density, double delta_t, double tau_fluid, double tau_therm, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z, double un_x, double un_y, double un_z, double tk) {
    //q
    return (tau_fluid * (f_x * (-tst_dx) + f_y * (-tst_dy) + f_z * (-tst_dz)
	    )
	    //MOVED FROM LHS:
	    + ref_density * (tau_fluid / delta_t) * (un_x * /*res */ (-tst_dx) +
						     un_y * /*res */ (-tst_dy) +
						     un_z * /*res */ (-tst_dz)
	    )
	);
  }
  static inline double pdr_comp_weakform_rhs_w(double f_x, double f_y, double f_z, double ref_density, double delta_t, double tau_fluid, double tau_therm, double tst, double tst_dx, double tst_dy, double tst_dz, double uk_x, double uk_y, double uk_z, double un_x, double un_y, double un_z, double tk) {
    //w
    return (
	     //Q + (Q is 0 when no heat being generated)
	     //terms involving Tk MOVED FROM LHS 
	     (tk / delta_t) * tst + (tk / delta_t) * /*res */ tau_therm * (uk_x * tst_dx + uk_y * tst_dy + uk_z * tst_dz)
	);
  }

#ifdef __cplusplus
}
#endif

#endif
